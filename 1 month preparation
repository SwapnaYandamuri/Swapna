PLUS MINUS-
class Result {

    /*
     * Complete the 'plusMinus' function below.
     *
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static void plusMinus(List<Integer> arr) {
    double pos=0,neg=0,zero=0;
    int n=arr.size(),value=0;
    for(int i=0;i<n;i++){
        value=arr.get(i);
    
    if(value>0){
        pos++;
        
    }   
    else if(value<0){
        neg++;
        
    }
    else{
        zero++;
    }
    }
    System.out.println(String.format("%.6f",pos/n));
    
    System.out.println(String.format("%.6f",neg/n));
    System.out.println(String.format("%.6f",zero/n));
    PANGRAMS-
    class Result {

    /*
     * Complete the 'pangrams' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING s as parameter.
     */

    public static String pangrams(String s) {
    // Write your code her
        HashSet<Character> set1 = setChars(s.toLowerCase());
        return (set1.size()==27) ? "pangram" : "not pangram";
    }
    static HashSet<Character> setChars(String s){
        HashSet<Character> hashSet = new HashSet<>();
        for(char ch : s.toCharArray()){
            hashSet.add(ch);
        }
        return hashSet;
    }
            
}
    
        
    
    

    }

}
MINI MAX-
class Result {

    /*
     * Complete the 'miniMaxSum' function below.
     *
     * The function accepts INTEGER_ARRAY arr as parameter.
     */

    public static void miniMaxSum(List<Integer> arr) {
    // Write your code here
    int n=arr.size();
    long max=0;
    Collections.sort(arr);
    for(int i=1;i<n;i++){
        max=max+arr.get(i);    
    }
    long min=0;
    for(int j=0;j<n-1;j++){
        min=min+arr.get(j);
        
    }
    System.out.printf(min+" "+max);
    
    
    
    
    

    }

}
LONELY INTEGER-
class Result {

    /*
     * Complete the 'lonelyinteger' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts INTEGER_ARRAY a as parameter.
     */

    public static int lonelyinteger(List<Integer> a) {
    // Write your code here
     List<Integer> list=new ArrayList<>();
     int n=a.size();
     for(int i=0;i<n;i++){
       if(!list.contains(a.get(i))){
            list.add(a.get(i));
        }
        else{
            list.remove(a.get(i));
        }  
     }
     return list.get(0);
     }

}
SPARSE ARRAYS-
class Result {

    /*
     * Complete the 'matchingStrings' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. STRING_ARRAY strings
     *  2. STRING_ARRAY queries
     */

    public static List<Integer> matchingStrings(List<String> strings, List<String> queries) {
    // Write your code here
    Map<String, Integer> map = new HashMap<>();
    List<Integer> res = new ArrayList<>();

    for (String s : strings) {
        if (!map.containsKey(s)) {
            map.put(s, 1);
        } else {
            map.put(s, map.get(s) + 1);
        }
    }

    for (String q : queries) {
        if (map.containsKey(q)) {
            res.add(map.get(q));
        } else {
            res.add(0);
        }
    }
    return res;

    
    
    }
}
DIAGONAL DIFFERNCE-
class Result {

    /*
     * Complete the 'diagonalDifference' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts 2D_INTEGER_ARRAY arr as parameter.
     */

    public static int diagonalDifference(List<List<Integer>> arr) {
    // Write your code here
    
        int leftDiagonal = 0;
        int rightDiagonal = 0;
        
        for (int i = 0; i < arr.size(); i++) {
        leftDiagonal += arr.get(i).get(i);
        rightDiagonal += arr.get(i).get((arr.get(i).size() - 1) - i);
        }
        
        return Math.abs(leftDiagonal - rightDiagonal);


    }

}
TIME CONVERSION
public static String timeConversion(String s) {
    // Write your code here
    String str="";
    if(!s.substring(0,2).equals("12")&&s.contains("PM")){
        str=Integer.toString(Integer.parseInt(s.substring(0,2))+12);
        s=str+s.substring(2,s.length());
        
    }
    if(s.substring(0,2).equals("12")&& s.contains("AM")){
        str="00";
        s=str+s.substring(2,s.length());
        
        
    }
    return s.substring(0,s.length()-2);
    
 }
 PERMUTING TWO ARRAYS
 public static String twoArrays(int k, List<Integer> A, List<Integer> B) {
    // Write your code here
    List<Integer> li=new ArrayList<>();
    Collections.sort(A);
    Collections.sort(B,Collections.reverseOrder());
    int a=0;
    for(int i=0;i<A.size();i++){
        a=A.get(i)+B.get(i);
        li.add(a);
    }
    for(int list: li){
        if(list<k){
            return "NO";
        }
        
    }
    return "YES";    
    
    
    }
}
SUBARRAY DIVISION-
public static int birthday(List<Integer> s, int d, int m) {
    // Write your code here
    ArrayList<Integer> li=(ArrayList<Integer>)s;
    int count=0;
    for(int i=0;i<=li.size()-m;i++){
        int sum=0;
        for(int j=i;j<i+m;j++){
            sum=sum+li.get(j);
            
        }
        if(sum==d){
            count++;
        }
    }
    return count;
    

    }

}
XOR STRINGS-
public static String stringsXOR(String s, String t) {
        String res = new String("");
        for(int i = 0; i < s.length(); i++) {
            if(s.charAt(i) == t.charAt(i))
                res += "0";
            else
                res += "1";
        }

        return res;
    }
    ZIG ZAG SEQUENCE-
    public static void main (String[] args) throws java.lang.Exception {
        Scanner kb = new Scanner(System.in);
        int test_cases = kb.nextInt();
        for(int cs = 1; cs <= test_cases; cs++){
            int n = kb.nextInt();
             int a[] = new int[n];
            for(int i = 0; i < n; i++){
                a[i] = kb.nextInt();
            }
            findZigZagSequence(a, n);
        }
   }
   TOWER BREAKERS-
    public static int towerBreakers(int n, int m) {
    // Write your code here
    int towers=n;
    int height=m;
    int x,y;
    for(int i=0;i<m;i++){
        if(m==1){
            return 2;
        }
        if(n%2==1){
            return 1;
            
        }
        
        
        
    }
    return 2;
    

    }

}
INSERT A NODE AT A SPECIFIC POSITION IN A LINKED LIST-
public static SinglyLinkedListNode insertNodeAtPosition(SinglyLinkedListNode llist , int data , int position) {
    SinglyLinkedListNode p=llist;
    for(int i=0;i<position-1;i++){
        p=p.next;
    }
    SinglyLinkedListNode curr=new SinglyLinkedListNode(data);
        curr.next = p.next;
        p.next = curr;
        if(llist==null){
            llist=curr;
        }
        
        return llist;

    }





